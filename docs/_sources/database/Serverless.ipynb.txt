{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d004887e-18c6-4cac-aeb0-43248d12a3f8",
   "metadata": {},
   "source": [
    "# HDF File as a Database\n",
    "As many information can be stored in an HDF5 files. By using goups, the structure can be quite nested and sometime it could be helpful to just search for an attribute, a dataset name or a specific property of it, or instance. Thus, an HDF5 file itself is a kind of database in itself.\n",
    "\n",
    "The h5rdmtoolbox provides methods for H5File (and its subclasses) to find datasets and groups. The query syntax is tried to be as close as possible to the one pymongo uses.\n",
    "\n",
    "## Filtering a single file with pymongo-syntax"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3a21c92-23b8-48d5-983b-79bd997b1364",
   "metadata": {},
   "outputs": [],
   "source": [
    "from h5rdmtoolbox import database as h5db\n",
    "import h5rdmtoolbox as h5tbx"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ceb200c1-7751-4f57-b077-45beb546b8be",
   "metadata": {},
   "source": [
    "Let's build an example file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b221f7e9-e805-402c-8196-4ee099406c9a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_filename = h5tbx.generate_temporary_filename()\n",
    "\n",
    "with h5tbx.H5File(test_filename, 'r+') as h5:\n",
    "    h5.attrs['attrvalue'] = 3\n",
    "    h5.attrs['a float'] = 4.1\n",
    "    h5.attrs['root_attr3'] = 'a string'\n",
    "    h5.create_group('a group', attrs=dict(attrvalue=14.3))\n",
    "    h5.create_dataset('x', shape=(2,), units='', standard_name='x_coordinate', attrs=dict(attrvalue=3))\n",
    "    h5.create_dataset('y', shape=(2,), units='', standard_name='y_coordinate')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a83a813-bd7e-448a-87d5-d400ea0eab82",
   "metadata": {},
   "source": [
    "### Query syntax\n",
    "\n",
    "The method to be called to find something in an HDF5 file is find() (or find_one()). What can be foud are datasets or groups. It can also be limited to one of the both objects.\n",
    "\n",
    "The syntax is very similar to that of pymongo. There's a basic search and a advanced search.\n",
    "\n",
    "### Basic search\n",
    "\n",
    "The basic search queries attributes, only. To find an object, a dictionary is passed containing the name of an attribute and the value, e.g.:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d732fba2-b3b7-4566-b220-f45af92aa77b",
   "metadata": {},
   "outputs": [],
   "source": [
    "with h5tbx.H5File(test_filename) as h5:\n",
    "    print(h5.find({'attrvalue': 3}))\n",
    "    r = h5.find_one({'attrvalue': 3})\n",
    "    print(r)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7778fbc9-7e7d-49e6-b94d-8fe3d275fec6",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "The above query finds to objects (root group and dataset 'x') based on the attribute \"attrvalue\", which matches 3.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc7917c7-e373-4a2f-b4fa-f68f63faa34d",
   "metadata": {},
   "source": [
    "### Advanced search\n",
    "\n",
    "The advanced search involveds special keywords starting with a dollar sign. For the key of the dictionary this is intepreted as a class property: `$<class-property>`. A typical property-keyword would be `$basename`, which matches all base-names (name without parent-path). The dictionary value can also be adjusted. This allows other comparisons than \"is equal to\" as it is the case with the basic search. Let's perform some advanced searches:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c88f5fcd-f3fe-474d-b346-e0c751821877",
   "metadata": {},
   "outputs": [],
   "source": [
    "with h5tbx.H5File(test_filename) as h5:\n",
    "    print(\"{'attrvalue': {'$gt': 0}:\\n\\t\", h5.find({'attrvalue': {'$gt': 0}}))\n",
    "    print(\"\\n{'standard_name':  {'$regex': '_coordinate$'}}:\\n\\t\", h5.find({'standard_name': {'$regex': '_coordinate$'}}))\n",
    "    print(\"\\n{'$basename': 'x'}:\\n\\t\", h5.find({'$basename': 'x'}))\n",
    "    print(\"\\n{'$ndim': 1)}:\\n\\t\", h5.find({'$ndim': 1}))\n",
    "    print(\"\\n{'$shape': (2, )}:\\n\\t\", h5.find({'$shape': (2, )}))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a551d722-1861-46eb-9003-237282c6bdca",
   "metadata": {},
   "source": [
    "All query operators (that's what it is called in pymongo) implemented are:\n",
    "\n",
    "- $gt : greater than\n",
    "\n",
    "- $gte : geater than equal\n",
    "\n",
    "- $lt : less than\n",
    "\n",
    "- $lte : less than equal\n",
    "\n",
    "- $eq : equal to\n",
    "\n",
    "- $regex : Filter with regular expression\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "722784a5-d90c-4785-9f57-b424ce3f9b0f",
   "metadata": {},
   "source": [
    "### Only get dataset or group as return\n",
    "Pass `$dataset` or `$group` as the second argument"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "410d8841-76f7-4db2-8c54-e7c67c46c79e",
   "metadata": {},
   "outputs": [],
   "source": [
    "with h5tbx.H5File(test_filename) as h5:\n",
    "    print(h5.find({'$basename': 'x'}, '$dataset'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1215d0ee-b757-4762-bcab-20111db7ed8f",
   "metadata": {},
   "source": [
    "## H5Files - Accessing multiple HDF files\n",
    "\n",
    "This concepts assumes that we already know the HDF files. We can apply the `find` or `find_one` methods, too:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "090acaf7-f3f6-408e-9f94-e595f07ea4c7",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from h5rdmtoolbox import tutorial\n",
    "list_of_hdf_filenames = tutorial.Database.generate_test_files(3)\n",
    "with h5db.H5Files(*list_of_hdf_filenames[0:2]) as h5files:\n",
    "    print(h5files.keys())\n",
    "    h5files[0].dump()\n",
    "    h5files[1].dump()\n",
    "    print(h5files.find({'$name': '/u'}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "22cbd357-af76-459a-a265-5d232b1c8f61",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
