{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "91c4ae4d-2b0e-4de5-b759-4c9fc9d072b1",
   "metadata": {},
   "source": [
    "# Extension\n",
    "\n",
    "The wrapper class functionalities can be extended using composition or inheritance.\n",
    "\n",
    "## Composition\n",
    "\n",
    "### Registration of properties\n",
    "To facilitate and speed up certain tasks and workflows, it might be usefull to have additional properties. Let's assume we want to store a username as an attribute in the HDF5 file. Let's further assume that a user name has a firstname and a surname and both must start with a capitalized letter. To catch possible errerneous input by the user, we would need an additional method, e.g. \"set_username\" or a property \"username\" of `H5File`.<br>**Two** possible ways to achieve this: **inheritance or composition**. The quick and recommended way to add a new class property is to use composition by \"registering\" the property. Like this we don't have to rewrite (inherite at least) the API but only simply write the porperty class.<br>\n",
    "Let's first write a property class \"username\". It needs **three methods**: `get`, `set` and `delete`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a1cbc998-a747-4370-b362-d04c4d6508be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:10.916174Z",
     "iopub.status.busy": "2022-08-12T13:55:10.916174Z",
     "iopub.status.idle": "2022-08-12T13:55:12.392243Z",
     "shell.execute_reply": "2022-08-12T13:55:12.392243Z"
    }
   },
   "outputs": [],
   "source": [
    "import h5rdmtoolbox as h5tbx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "98270fc1-d0d1-4d46-99d0-76691da2ad64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.396329Z",
     "iopub.status.busy": "2022-08-12T13:55:12.392243Z",
     "iopub.status.idle": "2022-08-12T13:55:12.407957Z",
     "shell.execute_reply": "2022-08-12T13:55:12.407957Z"
    }
   },
   "outputs": [],
   "source": [
    "@h5tbx.wrapper.register_special_property(h5tbx.H5File, overwrite=True)\n",
    "class username:\n",
    "    \n",
    "    def get(self):\n",
    "        _username = self.attrs.get('username', None)\n",
    "        if _username is not None:\n",
    "            return _username\n",
    "        raise AttributeError('No user found')\n",
    "        \n",
    "    def set(self, _username):\n",
    "        \"\"\"Write the user name to HDF attribute of naming convention is matched\"\"\"\n",
    "        _username_split = _username.split(' ')\n",
    "        if not len(_username_split) == 2:\n",
    "            raise ValueError(f'User name must have first name and surname spearated by a space, but got: {_username}')\n",
    "        if _username_split[0][0].islower() or _username_split[0][0].islower():\n",
    "            raise ValueError(f'Names must have capitalized first letters, but got: {_username}')\n",
    "        self.attrs.create('username', _username)\n",
    "        \n",
    "    def delete(self):\n",
    "        _username = self.attrs.get('username', None)\n",
    "        if _username:\n",
    "            print(f\"deleting '{_username}'\")\n",
    "            self.attrs.__delitem__('username')\n",
    "        else:\n",
    "            raise AttributeError('No user to be deleted')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8659f46-13f3-40db-9218-5cb6ad5c9034",
   "metadata": {},
   "source": [
    "Some words about above lines:\n",
    "- `@h5tbx.wrapper.register_special_property(h5tbx.H5File)`: registering the below class (only) to the class `H5File`\n",
    "- don't use existing property names. An error will be raised anyhow. You may however pass `overwrite=True` in the registration method. Be careful though!\n",
    "- provide `set` and optionally also `get` and `delete`. The method `get` makes sense though, while `delete` is not really needed most of the times.\n",
    "\n",
    "Let's check if it worked out:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "40fb961f-159d-4331-9a66-cf0b3ea6abae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.407957Z",
     "iopub.status.busy": "2022-08-12T13:55:12.407957Z",
     "iopub.status.idle": "2022-08-12T13:55:12.426378Z",
     "shell.execute_reply": "2022-08-12T13:55:12.426378Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Names must have capitalized first letters, but got: adam Username\n",
      "The user name is:  Adam Username\n",
      "deleting 'Adam Username'\n",
      "No user to be deleted\n"
     ]
    }
   ],
   "source": [
    "with h5tbx.H5File() as h5file:\n",
    "    try:\n",
    "        h5file.username = 'adam Username'\n",
    "    except ValueError as e:\n",
    "        print(e)\n",
    "    h5file.username = 'Adam Username'\n",
    "    print('The user name is: ', h5file.attrs['username'])\n",
    "    \n",
    "    del h5file.username\n",
    "    try:\n",
    "        del h5file.username\n",
    "    except AttributeError as e:\n",
    "        print(e)\n",
    "        \n",
    "    h5file.attrs['username'] = 'lower lower'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b144ceb1-f9e0-4a24-943a-004aa917e829",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Inheritance \n",
    "\n",
    "### New Wrapper Class\n",
    "\n",
    "The main wrapper class around a HDF5 file in this package is `H5File` which uses the wrapper class `H5Group` for `h5py.Group` and `H5Dataset` for wrapping `h5py.Dataset`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2a9e583e-b5a9-4c41-9f44-37be82808b46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.426378Z",
     "iopub.status.busy": "2022-08-12T13:55:12.426378Z",
     "iopub.status.idle": "2022-08-12T13:55:12.446440Z",
     "shell.execute_reply": "2022-08-12T13:55:12.446440Z"
    }
   },
   "outputs": [],
   "source": [
    "import h5rdmtoolbox as h5tbx\n",
    "import h5py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "238bccd4-b623-42e0-b4e7-5bb8cd61e42f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.446440Z",
     "iopub.status.busy": "2022-08-12T13:55:12.446440Z",
     "iopub.status.idle": "2022-08-12T13:55:12.465867Z",
     "shell.execute_reply": "2022-08-12T13:55:12.465867Z"
    }
   },
   "outputs": [],
   "source": [
    "class MyDataset(h5tbx.wrapper.h5file.H5Dataset):\n",
    "    def __repr__(self):\n",
    "        return f'{self.name}\\n{self.attrs}'\n",
    "    \n",
    "    @property\n",
    "    def is_2d(self):\n",
    "        \"\"\"returns whether dataset is two-dimensional or not\"\"\"\n",
    "        return self.ndim == 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "02178fd3-2319-4382-941d-487545b77721",
   "metadata": {},
   "source": [
    "Next we create a group class with a special method, hat returns all datasets of that group. Also the `create_dataset` method is overwritten. Take care to return `MyDataset` at the end of the method, otherwise dataset class of the parent class is taken."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ae1b660a-c370-4e29-9467-64d1272a3daa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.465867Z",
     "iopub.status.busy": "2022-08-12T13:55:12.465867Z",
     "iopub.status.idle": "2022-08-12T13:55:12.486108Z",
     "shell.execute_reply": "2022-08-12T13:55:12.486108Z"
    }
   },
   "outputs": [],
   "source": [
    "class MyGroup(h5tbx.wrapper.h5file.H5Group):\n",
    "    \n",
    "    def get_all_datasets(self):\n",
    "        \"\"\"returns all datasets of this group\"\"\"\n",
    "        return [k for k in self if isinstance(self[k], h5py.Dataset)]\n",
    "    \n",
    "    def create_group(self, *args, **kwargs):\n",
    "        return __class__(super().create_group(*args, **kwargs).id)\n",
    "    \n",
    "    # def create_dataset(self, *args, **kwargs):\n",
    "    #     return __class__(super().create_dataset(*args, **kwargs).id)\n",
    "    \n",
    "    def create_dataset(self, name, user, *args, **kwargs):\n",
    "        ds = super().create_dataset(name, *args, **kwargs)\n",
    "        ds.attrs.modify('user', user)\n",
    "        return self._h5ds(ds.id)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09e135e0-ce76-4c77-90eb-8ec7fe811f40",
   "metadata": {},
   "source": [
    "The main file wrapper inherites from `H5File` (\"root\" parent was `h5py.File`) and the new group class. Next, we have set the group and dataset class again, since some methods in the file wrapper class will need that information when returning instances of those classes (e.g. dataset or group creation). Finally we define a new method which sets the user name to the root attributes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "21bcc1fe-1fbc-49f8-942f-14b7b87f08bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.486108Z",
     "iopub.status.busy": "2022-08-12T13:55:12.486108Z",
     "iopub.status.idle": "2022-08-12T13:55:12.506010Z",
     "shell.execute_reply": "2022-08-12T13:55:12.506010Z"
    }
   },
   "outputs": [],
   "source": [
    "class MyWrapper(h5tbx.H5File, MyGroup):\n",
    "    \n",
    "    def set_user(self, user_name):\n",
    "        self.attrs.modify('user', user_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f764f4ba-2339-41d6-b57a-b6e2197e24e1",
   "metadata": {},
   "source": [
    "register the dataset and group class in all classes. This is needed, so all return objects are of the newly defined types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bb4c50eb-4cf7-4a26-8b88-0c2185c681fb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.506010Z",
     "iopub.status.busy": "2022-08-12T13:55:12.506010Z",
     "iopub.status.idle": "2022-08-12T13:55:12.525975Z",
     "shell.execute_reply": "2022-08-12T13:55:12.525975Z"
    }
   },
   "outputs": [],
   "source": [
    "MyGroup._h5ds = MyDataset\n",
    "MyGroup._h5grp = MyGroup\n",
    "\n",
    "MyDataset._h5ds = MyDataset\n",
    "MyDataset._h5grp = MyGroup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "bc3a2495-9167-4d4d-8c45-6280a5951b36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.525975Z",
     "iopub.status.busy": "2022-08-12T13:55:12.525975Z",
     "iopub.status.idle": "2022-08-12T13:55:12.546271Z",
     "shell.execute_reply": "2022-08-12T13:55:12.546094Z"
    }
   },
   "outputs": [],
   "source": [
    "h5 = MyWrapper()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b3b00f9f-5801-4c3e-b92a-db12d883b8cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.546271Z",
     "iopub.status.busy": "2022-08-12T13:55:12.546271Z",
     "iopub.status.idle": "2022-08-12T13:55:12.565828Z",
     "shell.execute_reply": "2022-08-12T13:55:12.565828Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "__main__.MyWrapper"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(h5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7d729bbe-89eb-46af-8cee-d46e700356a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.565828Z",
     "iopub.status.busy": "2022-08-12T13:55:12.565828Z",
     "iopub.status.idle": "2022-08-12T13:55:12.586381Z",
     "shell.execute_reply": "2022-08-12T13:55:12.586381Z"
    }
   },
   "outputs": [],
   "source": [
    "g = h5.create_group('grp', overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "70fe8adc-884e-48ed-aed2-98092654befc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.586381Z",
     "iopub.status.busy": "2022-08-12T13:55:12.586381Z",
     "iopub.status.idle": "2022-08-12T13:55:12.606152Z",
     "shell.execute_reply": "2022-08-12T13:55:12.606152Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "__main__.MyGroup"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c94cf1b1-6d2b-4aeb-8bfd-6fd3ad453ec8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.606152Z",
     "iopub.status.busy": "2022-08-12T13:55:12.606152Z",
     "iopub.status.idle": "2022-08-12T13:55:12.626226Z",
     "shell.execute_reply": "2022-08-12T13:55:12.626072Z"
    }
   },
   "outputs": [],
   "source": [
    "gg = g.create_group('grp', overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0d95e9ab-2b86-4041-8b58-aab672df3ed3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.626226Z",
     "iopub.status.busy": "2022-08-12T13:55:12.626226Z",
     "iopub.status.idle": "2022-08-12T13:55:12.646474Z",
     "shell.execute_reply": "2022-08-12T13:55:12.646314Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "__main__.MyGroup"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(gg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ff52f8fe-f255-4fcb-a5cf-af54f97597e1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.646474Z",
     "iopub.status.busy": "2022-08-12T13:55:12.646474Z",
     "iopub.status.idle": "2022-08-12T13:55:12.666232Z",
     "shell.execute_reply": "2022-08-12T13:55:12.666232Z"
    }
   },
   "outputs": [],
   "source": [
    "ds = gg.create_dataset('hello', user='test user', shape=(2,3), units='', long_name='a long name', overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "ed1414f5-9d42-4997-87d5-6e701afa615d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.666232Z",
     "iopub.status.busy": "2022-08-12T13:55:12.666232Z",
     "iopub.status.idle": "2022-08-12T13:55:12.686287Z",
     "shell.execute_reply": "2022-08-12T13:55:12.686287Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "/grp/grp/hello\n",
       "long_name  a long name\n",
       "units      \n",
       "user       test user"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c84d0e04-07cf-4f9a-b65c-e6d58fb8c17a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.686287Z",
     "iopub.status.busy": "2022-08-12T13:55:12.686287Z",
     "iopub.status.idle": "2022-08-12T13:55:12.706190Z",
     "shell.execute_reply": "2022-08-12T13:55:12.706190Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "__main__.MyDataset"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(ds)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f45aec6e-0afe-41d6-bd1b-b06c9cac14de",
   "metadata": {},
   "source": [
    "## Accessors"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "09ab355e-612f-482e-8248-7067639c5973",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.706190Z",
     "iopub.status.busy": "2022-08-12T13:55:12.706190Z",
     "iopub.status.idle": "2022-08-12T13:55:12.726327Z",
     "shell.execute_reply": "2022-08-12T13:55:12.726327Z"
    }
   },
   "outputs": [],
   "source": [
    "from h5rdmtoolbox.wrapper.accessory import register_special_dataset, register_special_property"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "74f6c450-2f36-44a9-89fc-1f6f348580d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.726327Z",
     "iopub.status.busy": "2022-08-12T13:55:12.726327Z",
     "iopub.status.idle": "2022-08-12T13:55:12.746037Z",
     "shell.execute_reply": "2022-08-12T13:55:12.746037Z"
    }
   },
   "outputs": [],
   "source": [
    "import xarray as xr\n",
    "@register_special_dataset('user', h5tbx.wrapper.h5file.H5Dataset)\n",
    "class InfoProperty:\n",
    "    \"\"\"Device Accessor class\"\"\"\n",
    "\n",
    "    def __init__(self, ds):\n",
    "        self._ds = ds\n",
    "        self._username = 'NoName'\n",
    "\n",
    "    @property\n",
    "    def name(self):\n",
    "        return self._username\n",
    "    \n",
    "    @name.setter\n",
    "    def name(self, new_name):\n",
    "        self._username = new_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a1782a3e-6c4c-487f-b7d7-3ce08ec41675",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.746037Z",
     "iopub.status.busy": "2022-08-12T13:55:12.746037Z",
     "iopub.status.idle": "2022-08-12T13:55:12.766330Z",
     "shell.execute_reply": "2022-08-12T13:55:12.766330Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<__main__.InfoProperty object at 0x000001B2A48213D0>\n",
      "NoName\n"
     ]
    }
   ],
   "source": [
    "with h5tbx.H5File() as h5:\n",
    "    ds = h5.create_dataset('test', shape=(2,), units='', standard_name='standard_test')\n",
    "    print(ds.user)\n",
    "    print(ds.user.name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "1b922cc1-b4aa-46ff-b037-9082a9504a46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.766330Z",
     "iopub.status.busy": "2022-08-12T13:55:12.766330Z",
     "iopub.status.idle": "2022-08-12T13:55:12.786534Z",
     "shell.execute_reply": "2022-08-12T13:55:12.786534Z"
    }
   },
   "outputs": [],
   "source": [
    "# register a property with setter and getter method:\n",
    "@register_special_property(h5tbx.wrapper.h5file.H5Dataset, overwrite=True)\n",
    "class username:\n",
    "    \"\"\"User Name Property\"\"\"\n",
    "\n",
    "    def get(self):\n",
    "        \"\"\"geter method\"\"\"\n",
    "        return self.attrs['user_name']\n",
    "\n",
    "    def set(self, user_name: str):\n",
    "        self.attrs['user_name'] = user_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "13bbaf6f-b912-4a41-bd3c-46c2afdb8a5b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-12T13:55:12.786534Z",
     "iopub.status.busy": "2022-08-12T13:55:12.786534Z",
     "iopub.status.idle": "2022-08-12T13:55:12.806542Z",
     "shell.execute_reply": "2022-08-12T13:55:12.806542Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<__main__.InfoProperty object at 0x000001B28550C940>\n",
      "NoName\n",
      "First User\n",
      "Second User\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<head><style>/*\r\n",
       "CSS inspired by xarray: https://github.com/pydata/xarray\r\n",
       "*/\r\n",
       ".h5tb-header > div,\r\n",
       ".h5tb-header > ul {\r\n",
       "    display: inline;\r\n",
       "    margin-top: 0;\r\n",
       "    margin-bottom: 0;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dataarray-cls,\r\n",
       ".h5tb-dataarray-name {\r\n",
       "    margin-left: 2px;\r\n",
       "    margin-right: 10px;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dataarray-name {\r\n",
       "    color: #000;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections {\r\n",
       "    list-style: none;\r\n",
       "    padding: 3px;\r\n",
       "    margin: 0;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections input {\r\n",
       "    display: none;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections label {\r\n",
       "    display: inline;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections > li > input + label > span {\r\n",
       "    display: inline;\r\n",
       "    margin-left: 4px;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections > li > input:checked + label > span {\r\n",
       "    display: none;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections input:enabled + label {\r\n",
       "    cursor: pointer;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections input:not(.h5tb-values-in) ~ ul {\r\n",
       "    display: none;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections input:not(.h5tb-values-in):checked ~ ul {\r\n",
       "    display: block;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections > li > input + label {\r\n",
       "    width: 140px;\r\n",
       "    color: #555;\r\n",
       "    font-weight: 500;\r\n",
       "    padding: 4px 0 2px 0;\r\n",
       "}\r\n",
       "\r\n",
       "\r\n",
       ".h5grp-sections > li > input + label:before {\r\n",
       "    display: inline-block;\r\n",
       "    content: '+';\r\n",
       "    font-size: 11px;\r\n",
       "    width: 15px;\r\n",
       "    text-align: center;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections > li > input:disabled + label:before {\r\n",
       "    color: #777;\r\n",
       "}\r\n",
       "\r\n",
       ".h5grp-sections > li > input:checked + label:before {\r\n",
       "    content: '-';\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dim-list {\r\n",
       "    display: inline-block !important;\r\n",
       "    list-style: none;\r\n",
       "    padding: 0;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dim-list li {\r\n",
       "    display: inline-block;\r\n",
       "    padding: 0;\r\n",
       "    margin: 0;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dim-list:before {\r\n",
       "    content: '(';\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dim-list:after {\r\n",
       "    content: ')';\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dim-list li:not(:last-child):after {\r\n",
       "    content: ',';\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-has-index {\r\n",
       "    text-decoration: underline;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-var-list {\r\n",
       "    list-style: none;\r\n",
       "    padding: 0;\r\n",
       "    margin: 0;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-var-list > li {\r\n",
       "    background-color: #fcfcfc;\r\n",
       "    overflow: hidden;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-var-list > li:nth-child(odd) {\r\n",
       "    background-color: #efefef;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-var-list li:hover {\r\n",
       "    background-color: rgba(3, 169, 244, .2);\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-var-list li > span {\r\n",
       "    display: inline-block;\r\n",
       "}\r\n",
       "\r\n",
       "input.h5tb-varname-in + label {\r\n",
       "    width: 140px;\r\n",
       "    padding-left: 0;\r\n",
       "    font-weight: bold;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dataset {\r\n",
       "    width: 100px;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-attributevalue {\r\n",
       "    width: 100px;\r\n",
       "    text-align: left;\r\n",
       "    color: #888;\r\n",
       "    white-space: nowrap;\r\n",
       "    font-size: 12px;\r\n",
       "}\r\n",
       "\r\n",
       "input.h5tb-varname-in + label:before {\r\n",
       "    content: ' ';\r\n",
       "    display: inline-block;\r\n",
       "    font-size: 11px;\r\n",
       "    width: 15px;\r\n",
       "    padding-left: 2px;\r\n",
       "    padding-right: 2px;\r\n",
       "    text-align: center;\r\n",
       "    color: #aaa;\r\n",
       "    text-decoration: none !important;\r\n",
       "}\r\n",
       "\r\n",
       "input.h5tb-varname-in:enabled + label:hover:before {\r\n",
       "    color: #000;\r\n",
       "}\r\n",
       "\r\n",
       "input.h5tb-varname-in:checked + label:before {\r\n",
       "    color: #ccc;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dims {\r\n",
       "    width: 280px;\r\n",
       "    white-space: nowrap;\r\n",
       "}\r\n",
       "\r\n",
       "\r\n",
       ".h5tb-unit {\r\n",
       "    width: 96px;\r\n",
       "    white-space: nowrap;\r\n",
       "    padding-right: 2px;\r\n",
       "    text-align: right;\r\n",
       "    color: #555;\r\n",
       "    font-style: italic;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-attr-list {\r\n",
       "    list-style: none;\r\n",
       "    background-color: #fff;\r\n",
       "    padding-bottom: 6px;\r\n",
       "    color: #555;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-attr-list li,\r\n",
       ".h5tb-attr-list li:hover {\r\n",
       "    background-color: #fff;\r\n",
       "}\r\n",
       "\r\n",
       ".h5tb-dim-highlight {\r\n",
       "    background-color: rgba(3, 169, 244, .2);\r\n",
       "    cursor: pointer;\r\n",
       "}</style></head>\n",
       "<p>tmp10.hdf</p>\n",
       "<p>Check resuted in 1 issues.</p>\n",
       "\n",
       "<div class='h5tb-warp'>\n",
       "\n",
       "          <ul style=\"list-style-type: none;\" class=\"h5grp-sections\">\n",
       "                <li>\n",
       "                    <input id=\"group-ds-/-3656393400\" type=\"checkbox\" checked>\n",
       "                    <label style=\"font-weight: bold\" for=\"group-ds-/-3656393400\">\n",
       "                    /<span>(1)</span></label>\n",
       "              \n",
       "\n",
       "                <ul class=\"h5tb-attr-list\"><li style=\"list-style-type: none; font-style: italic\">__h5rdmtoolbox_version__ : 0.1.0</li><li style=\"list-style-type: none; font-style: italic\">__standard_name_table__ : EmptyStandardizedNameTable-v0</li><li style=\"list-style-type: none; font-style: italic\">__wrcls__ : H5File</li><li style=\"list-style-type: none; font-style: italic\">creation_time : 2022-08-12T15:55:12Z</li>\n",
       "                </ul>\n",
       "\n",
       "                <ul id=\"ds-1-/test-3657824400\" class=\"h5tb-var-list\">\n",
       "                <input id=\"ds-2-/test-3657827000\" class=\"h5tb-varname-in\" type=\"checkbox\">\n",
       "                <label class='h5tb-varname' \n",
       "                    for=\"ds-2-/test-3657827000\">test</label>\n",
       "                <span class=\"h5tb-dims\">(2,)</span>  [\n",
       "                <span class=\"h5tb-unit\">-</span>]\n",
       "<ul class=\"h5tb-attr-list\"><li style=\"list-style-type: none; font-style:\n",
       "         italic\">standard_name : standard_test</li><li style=\"list-style-type: none; font-style: italic\">user_name : Second User</li>\n",
       "\n",
       "                </ul>\n",
       "\n",
       "             </ul>\n",
       "             \n",
       "</li>\n",
       "</ul>\n",
       "</div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with h5tbx.H5File() as h5:\n",
    "    ds = h5.create_dataset('test', shape=(2,), units='', standard_name='standard_test')\n",
    "    print(ds.user)\n",
    "    print(ds.user.name)\n",
    "    \n",
    "    ds.attrs['user_name'] = 'First User'\n",
    "    print(ds.username)\n",
    "    ds.username = 'Second User'\n",
    "    print(ds.username)\n",
    "    h5.dump()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "661ea984-edcd-4b30-afa2-916f57f23951",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
