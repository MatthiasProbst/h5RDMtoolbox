{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "96b66aa8-e2cd-4696-a17b-6c18fab59910",
   "metadata": {},
   "source": [
    "# Ansys CFX to HDF\n",
    "\n",
    "It possible yet impracticle to convert a AnsysCFX result file into a single HDF5 file. Our approach here is to convert only the meta information (setup information) of the case/result files together with the moitor points."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "32df320a-42a2-4fb4-bdd9-ffeff100e790",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from h5rdmtoolbox.wrapper import H5File\n",
    "from h5rdmtoolbox.x2hdf.cfd.ansys import AnsysInstallation"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b11b6df-c7e8-4e00-a0d7-5a812769c5eb",
   "metadata": {},
   "source": [
    "## Managing the installation\n",
    "\n",
    "The class `AnsysInstallation` helps to manage the installation directory. If you have already set up environment variables for `cfx5pre`, `cfx5solve` etc., just initialize the object `of AnsysInstallation` with a None. Otherwise the installation directory is required."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "334acfcd-fabc-4dea-80b3-f1d1beb9a635",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnsysInstallation(inst_dir=WindowsPath('C:/Program Files/ANSYS Inc/v212/CFX/bin'), cfx5pre=WindowsPath('C:/Program Files/ANSYS Inc/v212/CFX/bin/cfx5pre.exe'), cfx5cmds=WindowsPath('C:/Program Files/ANSYS Inc/v212/CFX/bin/cfx5cmds.exe'), cfx5mondata=WindowsPath('C:/Program Files/ANSYS Inc/v212/CFX/bin/cfx5mondata.exe'), cfx5solve=WindowsPath('C:/Program Files/ANSYS Inc/v212/CFX/bin/cfx5solve.exe'))"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ansysinst = AnsysInstallation(None)  # if you already have env.-variables set\n",
    "ansysinst = AnsysInstallation('C:\\Program Files\\ANSYS Inc\\v212\\CFX\\bin')\n",
    "ansysinst"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b525f497-0ca3-4667-8f8e-76d23659d5c5",
   "metadata": {},
   "source": [
    "## Converting a case (partly) to HDF\n",
    "\n",
    "Get the test cfx file:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4131d1d7-1f8a-4f44-a828-48023d6be566",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from h5rdmtoolbox import tutorial"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba8cf83c-da0b-4161-b765-6c24364c6693",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_cfx_filename = tutorial.CFX.get_cfx_filename()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a36439b-5809-40e6-b8dc-0b9e4ce3b64a",
   "metadata": {},
   "source": [
    "To convert the data, simply call cfx2hdf:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5c971ec6-8a75-4f59-b434-211b05d67924",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "from h5rdmtoolbox.x2hdf.cfd import cfx2hdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1ba123e2-1c27-4902-b489-5387c7be02ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "hdf_filename = cfx2hdf(test_cfx_filename)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4b3103bc-4888-435a-89b7-7fa0596467a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "with H5File(hdf_filename) as h5:\n",
    "    p = h5.monitor.find_one({'$dataset': {'$basename': 'Total Pressure'}})\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1006b01-5f9d-44ce-8332-563aa79dc5d6",
   "metadata": {},
   "source": [
    "## Defining standard names for specific datasets\n",
    "Let's first create a translation file to assign standard names to certain datasets. We do that for one here:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a927189c-f3f6-4522-8133-be1102b95ec1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import yaml\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5fcd36b7-8f91-40b2-99bc-2c65f269b70c",
   "metadata": {},
   "outputs": [],
   "source": [
    "snt_filename = test_cfx_filename.parent / 'snt_translation.yml'\n",
    "with open(snt_filename, 'w') as f:\n",
    "    yaml.dump({'Total Pressure': 'total_air_pressure'}, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "464a8beb-ff0f-4ad5-b0b2-0120b248036d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "hdf_filename = cfx2hdf(test_cfx_filename, snt=snt_filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d04c47d3-7416-4e59-97fa-23d085435f2d",
   "metadata": {},
   "source": [
    "Check if standard name really has been applied:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e616236-62d3-4864-b503-ba454edc3804",
   "metadata": {},
   "outputs": [],
   "source": [
    "with H5File(hdf_filename) as h5:\n",
    "    p = h5.monitor.find_one({'$dataset': {'$basename': 'Total Pressure'}})\n",
    "    print(p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d85fe1dc-8028-4c7d-8a50-d9afde75cf40",
   "metadata": {},
   "outputs": [],
   "source": [
    "with H5File(hdf_filename) as h5:\n",
    "    p = h5.monitor.find_one({'$dataset': {'$basename': 'Total Pressure'}})\n",
    "    p[:].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d4dd891-f213-4dfa-8ab9-d3f89ecabb4b",
   "metadata": {},
   "source": [
    "## From shell\n",
    "\n",
    "The same could have been called from a shell:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "61261f03-8765-4e09-804b-98e1ff235265",
   "metadata": {},
   "outputs": [],
   "source": [
    "! h5tbx cfx2hdf -f {test_cfx_filename} -snt {snt_filename}"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
