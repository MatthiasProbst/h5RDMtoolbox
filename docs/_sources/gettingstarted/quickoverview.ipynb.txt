{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "897c6a94-d44e-4b89-bcb2-56a913faaafb",
   "metadata": {},
   "source": [
    "# Quick Overview"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe30cac8-1a28-46e1-b886-8b10979c4098",
   "metadata": {},
   "source": [
    "This chapter gives a quick overview into how to use the package. Detailed explanations can be found in the subchapters of the respective sub-classes."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3d38b11-9866-4d04-ae68-2354cf992ac1",
   "metadata": {},
   "source": [
    "Import the package and use the recommended abbreviation ``h5tbx``. We also will need `numpy`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5d92afd9-200c-4d25-b30d-25360c9d615f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import h5rdmtoolbox as h5tbx\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a80c93e7-6d5f-4187-896e-f8223d0449c3",
   "metadata": {},
   "source": [
    "## Create a HDF file\n",
    "\n",
    "We recommend using python's context manager. If no filename is passed to the wrapper file, then a temporary file is created. This file is deleted when you python program finishes/the kernel is stopped. Per default, the mode is `r+`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "641d270b-6c02-4296-8ec7-34dc05af90df",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "with h5tbx.H5File() as h5:\n",
    "    print(h5.hdf_filename.name)  # equal to h5.filename but a pathlib.Path and exists also after file is closed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43ec3475-ae2f-47b6-a515-da57c9af52b1",
   "metadata": {},
   "source": [
    "## Create a dataset\n",
    "\n",
    "Assume we have a signal over time as numpy-arrays. We create two datasets for them. As signal is a function of time, we use HDF dimension scales (https://docs.h5py.org/en/stable/high/dims.html) to make the relationship, thus \"time\" is the scale (`make_scale=True`) to which \"signal\" is attached to (`attach_scale`)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "72fc4043-cecc-4cc1-9297-484fa458973b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "time = np.linspace(0, 1, 101)\n",
    "signal = np.sin(2*np.pi*3*time)\n",
    "\n",
    "signal_filename = h5tbx.generate_temporary_filename(suffix='h.hdf')\n",
    "\n",
    "with h5tbx.H5File(signal_filename, mode='w') as h5:\n",
    "    ds_time = h5.create_dataset(name='time', data=time, long_name='time', units='s', make_scale=True)\n",
    "    ds_signal = h5.create_dataset(name='signal', data=signal, long_name='my signal', units='V', attach_scale=ds_time)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6369b961-15b0-4b0c-a483-3bffca2b7c20",
   "metadata": {},
   "source": [
    "## Create a group\n",
    "Groups don't really differ from the implementation in `h5py` except they allow to pass the attibute `long_name` as an optional parameter:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0675041d-970f-4d86-bb01-477513a290f4",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "with h5tbx.H5File(signal_filename, mode='r+') as h5:\n",
    "    h5.create_group('mygroup', overwrite=True, long_name='my special group')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e111e9e6-5f1b-4e7d-b9a6-17c20406adb7",
   "metadata": {},
   "source": [
    "## Plot a data\n",
    "Plotting data is simple: The return value of a sliced HDF dataset is a `xr.DataArray`. Thanks to the package `xarray`, provides a plotting function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a9f3edb-a5fa-48be-9fb8-13bc9878e92b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "with h5tbx.H5File(signal_filename, 'r') as h5:\n",
    "    plt.figure(figsize=(4,2))\n",
    "    h5['signal'][:].plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1627e47a-37d1-45b2-8adc-d04d038b1574",
   "metadata": {},
   "source": [
    "## Natural Naming\n",
    "Until here we used the conventional way of addressing variables and groups in a dictionary-like style. `h5RDMtoolbox` allows to use \"natural naming\" which means that we can address those objects as if they were attributes. Make sure `h5tbx.config.natural_naming` is set to `True` (the default):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a088543-0338-4022-a691-4108a95b1951",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "h5tbx.config.natural_naming = True\n",
    "with h5tbx.H5File(signal_filename, 'r') as h5:\n",
    "    ds = h5.signal[:]\n",
    "    grp = h5.mygroup"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdcc735d-8422-4710-a794-984a59580ad6",
   "metadata": {},
   "source": [
    "## Inspect file content\n",
    "Often it is necessary to recall the content of a file. Calling `dump()` on a group represents the content (dataset, groups and attributes) as a pretty nd interactive (!) html representation. This is adopted from the `xarray` package. All credits for this idea go there. The representation here avoids showing data, though. Outside an IPython environment call `sdump()` to get a string representation of the file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db6775f0-f3f0-40ac-887d-d00068188138",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "with h5tbx.H5File(signal_filename) as h5:\n",
    "    h5.dump()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ce21c36-39ba-4c0c-96e6-2ab089295af8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
