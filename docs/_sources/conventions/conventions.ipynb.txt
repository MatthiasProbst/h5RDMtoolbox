{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4fb39971-92fa-4c19-a391-642236fc5afc",
   "metadata": {},
   "source": [
    "# Standard Name Convention\n",
    "\n",
    "Standard name conventions define how meta information is called what syntax is accepted. Intentionally this results in efficient, automatated and clear data exploration and processing.\n",
    "\n",
    "Most basically, a name identifier should be defined as an attribute of every dataset in an HDF file. A popular one is \"standard_name\" as used by the climate and forecast community. It e.g. does not allow space in standard names and must be lower case. Furthermore, the construction of it is defined in online documentations and naming tables (standard name tables) provide standard names currently excepted by the community. This packages adopts this concept by introducing standardized name tables (class `StandardzedNameTable`) which allows flexible usage of such name definitions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3026a8e2-ebf6-48aa-9bd6-9d915b9672d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:43.165280Z",
     "iopub.status.busy": "2022-08-15T09:41:43.165280Z",
     "iopub.status.idle": "2022-08-15T09:41:45.094911Z",
     "shell.execute_reply": "2022-08-15T09:41:45.094911Z"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import h5rdmtoolbox as h5tbx"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74c72248-2b69-48f6-b556-4d1b25349752",
   "metadata": {},
   "source": [
    "Whenever a dataset is written and the parameter \"standard_name\" is set, it is verified against the standard name convention/table associated with the wrapper class. If the constant `STRICT` is set to True (default), the name is looked-up in the table and, if not found, the dataset cannot be written. To allow standard names, that fulfill the spelling requirements but are not yet listed in the table, set `STRICT` to False:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "52a96fd3-318c-4e0a-8c57-82cfcb170480",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.097821Z",
     "iopub.status.busy": "2022-08-15T09:41:45.097821Z",
     "iopub.status.idle": "2022-08-15T09:41:45.109918Z",
     "shell.execute_reply": "2022-08-15T09:41:45.109918Z"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "h5tbx.conventions.identifier.STRICT = False"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df618578-e7a9-4d42-8ebf-4b00ed1b53be",
   "metadata": {},
   "source": [
    "## Initialize a Standard Name Convention\n",
    "A standardized name table is a XML document, which contains (at least) a description and a canonical unit for a standarized name. We'll build one from scratch first and then have a look into already implemented ones:\n",
    "\n",
    "Call `StandardizedNameTable` from the sub-package `conventions` and provide a `name`, `version`, `table_dict`, `contact` and and `insitution`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "569b7ff4-5e17-4eda-9e8b-d449277f203e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.112819Z",
     "iopub.status.busy": "2022-08-15T09:41:45.112819Z",
     "iopub.status.idle": "2022-08-15T09:41:45.124909Z",
     "shell.execute_reply": "2022-08-15T09:41:45.124909Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Test_SNC (version number: 1)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sc = h5tbx.conventions.StandardizedNameTable(name='Test_SNC', table_dict={}, version_number=1, contact='contact@python.com', institution='my_institution')\n",
    "sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cf8f558-9443-4046-9ec4-17e33414a2c9",
   "metadata": {},
   "source": [
    "We have built an empty convention (no table content). Lets add content. We can do this by creating a dictionary first..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "77561296-edfe-476c-b316-553c1ff92cee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.127819Z",
     "iopub.status.busy": "2022-08-15T09:41:45.127819Z",
     "iopub.status.idle": "2022-08-15T09:41:45.139911Z",
     "shell.execute_reply": "2022-08-15T09:41:45.139911Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'x_velocity': {'canonical_units': 'm/s',\n",
       "  'description': 'velocity is a vector quantity.'}}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tabledict = {'x_velocity': dict(canonical_units='m/s', description='velocity is a vector quantity.')}\n",
    "tabledict"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ac2f67c-0958-4578-82d7-767534251196",
   "metadata": {},
   "source": [
    "... and add it to the object by calling `update()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1c3230f1-2a0d-4b09-b885-3b6a8a16fe83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.142820Z",
     "iopub.status.busy": "2022-08-15T09:41:45.142820Z",
     "iopub.status.idle": "2022-08-15T09:41:45.154616Z",
     "shell.execute_reply": "2022-08-15T09:41:45.154616Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>canonical_units</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>x_velocity</th>\n",
       "      <td>m/s</td>\n",
       "      <td>velocity is a vector quantity.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sc.update(tabledict)\n",
    "sc.dump()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "584a57e5-acf8-456a-bad4-cfdeea50dfb8",
   "metadata": {},
   "source": [
    "New entries cann be assigned by using `set` or `modified` depending on whether the entry already exists or not:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9e4ce9fe-de0e-4e3c-9410-e5dc891294af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.157533Z",
     "iopub.status.busy": "2022-08-15T09:41:45.157533Z",
     "iopub.status.idle": "2022-08-15T09:41:45.169536Z",
     "shell.execute_reply": "2022-08-15T09:41:45.169536Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>canonical_units</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <td>s</td>\n",
       "      <td>physical time</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>x_velocity</th>\n",
       "      <td>m/s</td>\n",
       "      <td>velocity is a vector quantity. x indicates the component in y-axis direction</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y_velocity</th>\n",
       "      <td>m/s</td>\n",
       "      <td>velocity is a vector quantity. y indicates the component in y-axis direction</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>z_velocity</th>\n",
       "      <td>m/s</td>\n",
       "      <td>velocity is a vector quantity. z indicates the component in z-axis direction</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sc.set('time', canonical_units='s', description='physical time')\n",
    "sc.modify('x_velocity', canonical_units='m/s', description='velocity is a vector quantity. x indicates the component in y-axis direction')\n",
    "sc.set('y_velocity', canonical_units='m/s', description='velocity is a vector quantity. y indicates the component in y-axis direction')\n",
    "sc.set('z_velocity', canonical_units='m/s', description='velocity is a vector quantity. z indicates the component in z-axis direction')\n",
    "sc.dump()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2855d67-4e91-4d32-a173-c581f77b6b93",
   "metadata": {},
   "source": [
    "## Writing Standard Name Convention to XML\n",
    "\n",
    "Standardized name tables should be provided as xml documents:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7d29f972-b6c2-4a25-85cc-8d8c39f28154",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.172535Z",
     "iopub.status.busy": "2022-08-15T09:41:45.172535Z",
     "iopub.status.idle": "2022-08-15T09:41:45.184529Z",
     "shell.execute_reply": "2022-08-15T09:41:45.184529Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "WindowsPath('C:/Users/da4323/AppData/Local/h5rdmtoolbox/h5rdmtoolbox/tmp/tmp202/tmp0.xml')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xml_filename = h5tbx.generate_temporary_filename(suffix='.xml')\n",
    "sc.to_xml(xml_filename)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fa87fb5-04c1-4cb1-bae8-6a5f57339ad1",
   "metadata": {},
   "source": [
    "## Load Standard Name Convention from XML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "be7625e3-349d-49bd-a14c-e9b2f220da91",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.190538Z",
     "iopub.status.busy": "2022-08-15T09:41:45.187535Z",
     "iopub.status.idle": "2022-08-15T09:41:45.214635Z",
     "shell.execute_reply": "2022-08-15T09:41:45.214635Z"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test_SNC-v1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>canonical_units</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <td>s</td>\n",
       "      <td>physical time</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>x_velocity</th>\n",
       "      <td>m/s</td>\n",
       "      <td>velocity is a vector quantity. x indicates the component in y-axis direction</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y_velocity</th>\n",
       "      <td>m/s</td>\n",
       "      <td>velocity is a vector quantity. y indicates the component in y-axis direction</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>z_velocity</th>\n",
       "      <td>m/s</td>\n",
       "      <td>velocity is a vector quantity. z indicates the component in z-axis direction</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sc_test = h5tbx.conventions.StandardizedNameTable.from_xml(xml_filename)\n",
    "print(sc_test.versionname)\n",
    "sc_test.dump()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f23f296-6757-4ad8-9c43-1a3a383c185f",
   "metadata": {},
   "source": [
    "## Existing Standard Name Convention\n",
    "There are already a domain-specific convention provided by the repository for fluid problems. As they are far from complete and under current deelopment at the current stage, we rather have a look into the cf-conventions from which the concept is adopted. We can download the current XML document from https://cfconventions.org/Data/cf-standard-names/79/src/cf-standard-name-table.xml by using the `turoial` module of this repo:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "49060588-f59a-415b-b0ca-55afbf4f609a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.217538Z",
     "iopub.status.busy": "2022-08-15T09:41:45.217538Z",
     "iopub.status.idle": "2022-08-15T09:41:45.379537Z",
     "shell.execute_reply": "2022-08-15T09:41:45.379537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "standard_name_table (version number: 79)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cf_xml_filename = h5tbx.tutorial.Conventions.fetch_cf_standard_name_table()\n",
    "cf_xml_filename"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "24fcc5e1-6c7a-43ce-a370-47ebe5449ba5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.382535Z",
     "iopub.status.busy": "2022-08-15T09:41:45.382535Z",
     "iopub.status.idle": "2022-08-15T09:41:45.574635Z",
     "shell.execute_reply": "2022-08-15T09:41:45.574635Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>canonical_units</th>\n",
       "      <th>grib</th>\n",
       "      <th>amip</th>\n",
       "      <th>description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>acoustic_signal_roundtrip_travel_time_in_sea_water</th>\n",
       "      <td>s</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>The quantity with standard name acoustic_signal_roundtrip_travel_time_in_sea_water is the time taken for an acoustic signal to propagate from the emitting instrument to a reflecting surface and back again to the instrument. In the case of an instrument based on the sea floor and measuring the roundtrip time to the sea surface, the data are commonly used as a measure of ocean heat content.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>aerodynamic_particle_diameter</th>\n",
       "      <td>m</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>The diameter of a spherical particle with density 1000 kg m-3 having the same aerodynamic properties as the particles in question.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>y_wind_gust</th>\n",
       "      <td>m s-1</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>\"y\" indicates a vector component along the grid y-axis, positive with increasing y. Wind is defined as a two-dimensional (horizontal) air velocity vector, with no vertical component. (Vertical motion in the atmosphere has the standard name upward_air_velocity.) A gust is a sudden brief period of high wind speed. In an observed time series of wind speed, the gust wind speed can be indicated by a cell_methods of maximum for the time-interval. In an atmospheric model which has a parametrised calculation of gustiness, the gust wind speed may be separately diagnosed from the wind speed.</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zenith_angle</th>\n",
       "      <td>degree</td>\n",
       "      <td>None</td>\n",
       "      <td>None</td>\n",
       "      <td>Zenith angle is the angle to the local vertical; a value of zero is directly overhead.</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cf_xml_filename.dump(max_rows=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ae55dbd6-af9a-4346-b232-b9f4fed3e436",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.577545Z",
     "iopub.status.busy": "2022-08-15T09:41:45.577545Z",
     "iopub.status.idle": "2022-08-15T09:41:45.589543Z",
     "shell.execute_reply": "2022-08-15T09:41:45.589543Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cf_xml_filename.check_name('zenith_angle', strict=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "7ef1281b-1b74-4143-b57e-299735526941",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.592633Z",
     "iopub.status.busy": "2022-08-15T09:41:45.592633Z",
     "iopub.status.idle": "2022-08-15T09:41:45.604546Z",
     "shell.execute_reply": "2022-08-15T09:41:45.604546Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "m/s"
      ],
      "text/latex": [
       "$\\frac{\\mathrm{m}}{\\mathrm{s}}$"
      ],
      "text/plain": [
       "<Unit('meter / second')>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cf_xml_filename['x_wind_gust'].canonical_units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "67174d49-18b5-4c47-af61-36e391f85eb0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.607639Z",
     "iopub.status.busy": "2022-08-15T09:41:45.607639Z",
     "iopub.status.idle": "2022-08-15T09:41:45.619643Z",
     "shell.execute_reply": "2022-08-15T09:41:45.619643Z"
    }
   },
   "outputs": [],
   "source": [
    "try:\n",
    "    cf_xml_filename.check_units('x_wind_gust', units='m/s')\n",
    "except h5tbx.conventions.StandardizedNameError as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a77d1c78-6a18-434d-b483-5cfeb049fd37",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.622547Z",
     "iopub.status.busy": "2022-08-15T09:41:45.622547Z",
     "iopub.status.idle": "2022-08-15T09:41:45.634640Z",
     "shell.execute_reply": "2022-08-15T09:41:45.634640Z"
    }
   },
   "outputs": [],
   "source": [
    "from h5rdmtoolbox.conventions.identifier import _units_power_fix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a773fd35-a187-4bd3-a083-d944b8347130",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.637634Z",
     "iopub.status.busy": "2022-08-15T09:41:45.637634Z",
     "iopub.status.idle": "2022-08-15T09:41:45.649629Z",
     "shell.execute_reply": "2022-08-15T09:41:45.649629Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'degree'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "_units_power_fix('degree')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6497fe45-cb00-4566-9031-4fdad221ccff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-08-15T09:41:45.652548Z",
     "iopub.status.busy": "2022-08-15T09:41:45.652548Z",
     "iopub.status.idle": "2022-08-15T09:41:45.664646Z",
     "shell.execute_reply": "2022-08-15T09:41:45.664646Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unit of standard name \"zenith_angle\" not as expected: \"K\" != \"deg\"\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "try:\n",
    "    cf_xml_filename.check_units('zenith_angle', units='K')\n",
    "except h5tbx.conventions.StandardizedNameError as e:\n",
    "    print(e)\n",
    "cf_xml_filename.check_units('zenith_angle', units='degree')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6bcea4c-7cb0-4b36-bdde-2ee9b12b7f46",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
